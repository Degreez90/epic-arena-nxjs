// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

//User Types
type Record {
  wins   Int @default(0)
  losses Int @default(0)
}

//Must be Int type because of prisma
type Earnings {
  total          Int       @default(0)
  lastPayout     Int       @default(0)
  lastPayoutDate DateTime?
}

//Must be Int type because of prisma
type Balance {
  promotionalBalance  Int @default(0)
  pendingBalance      Int @default(0)
  withdrawableBalance Int @default(0)
  depositLimit        Int @default(50000)
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  fName                 String?
  lName                 String?
  userName              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  vPassword             String?
  phoneNumber           String?
  tournaments           String[]
  image                 String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  record                Record?
  earnings              Earnings?
  balance               Balance?
  createdAt             DateTime               @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
