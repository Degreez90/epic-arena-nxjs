// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

//* prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

//* User Role
enum UserRole {
  ADMIN
  USER
}

//* User Types
model Record {
  id     String @id @default(uuid())
  wins   Int    @default(0)
  losses Int    @default(0)
  User   User[]
  Team   Team[]
}

//* Earnings Model
model Earnings {
  id             String    @id @default(uuid())
  total          Int       @default(0)
  lastPayout     Int       @default(0)
  lastPayoutDate DateTime?
  User           User[]
}

//* Balance Model
model Balance {
  id                  String @id @default(uuid())
  promotionalBalance  Int    @default(0)
  pendingBalance      Int    @default(0)
  withdrawableBalance Int    @default(0)
  depositLimit        Int    @default(50000)
  User                User[]
}

//* User Model
model User {
  id                    String                 @id @default(uuid())
  admin                 Boolean
  fName                 String?
  lName                 String?
  userName              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  vPassword             String?
  phoneNumber           String?
  tournaments           String[]
  image                 String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  record                Record?                @relation(fields: [recordId], references: [id])
  earningsId            String?
  earnings              Earnings?              @relation(fields: [earningsId], references: [id])
  balanceId             String?
  balance               Balance?               @relation(fields: [balanceId], references: [id])

  //The participant entries the user is associated with.
  participants Participant[]

  createdAt DateTime @default(now())
  recordId  String?
  ownedTeam Team?    @relation("owner")

  teamId String? @db.Uuid
  team   Team?   @relation("member", fields: [teamId], references: [id], onDelete: Cascade)

  tournamentCreator Tournament[]
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//  |----------------------------------------|
//  | Contains all the string union types.
//  |----------------------------------------|

//  The possible types for a double elimination stage's grand final.
enum GrandFinalType {
  NONE
  SIMPLE
  DOUBLE
}

// The possible modes for a round-robin stage.
enum RoundRobinMode {
  SIMPLE
  DOUBLE
}

//* Seed Ordering.
enum SeedOrdering {
  NATURAL
  REVERSE
  HALF_SHIFT
  REVERSE_HALF_SHIFT
  PAIR_FLIP
  INNER_OUTER
  GROUPS_EFFORT_BALANCED
  GROUPS_SEED_OPTIMIZED
  GROUPS_BRACKET_OPTIMIZED
}

//* Team Model
model Team {
  id String @id @default(uuid()) @db.Uuid

  //Owner of the team
  ownerId String @unique
  owner   User   @relation("owner", fields: [ownerId], references: [id], onDelete: Cascade)

  teamName String

  //Team Record
  recordId String
  record   Record @relation(fields: [recordId], references: [id])

  roster User[] @relation("member")

  Participant Participant[]

  @@unique([teamName])
}

//TODO:: Game types

//* Game Model
model Game {
  id        String  @id @default(uuid())
  gameTitle String
  category  String?
  rules     Json?
}

//* Tournament Status
enum TournamentStatus {
  ENROLL_OPEN
  ENROLL_CLOSED
  IN_PROGRESS
  FINISHED
}

//* Tournament Model
model Tournament {
  id          String           @id @default(uuid()) @db.Uuid
  name        String
  description String
  status      TournamentStatus @default(ENROLL_CLOSED)

  // The tournament id for the bracket-manager
  managerTournamentId Int @unique @default(autoincrement())

  teamSize Int?

  // The stages in the Tournament
  stages Stage[]

  // The participants of the Tournament
  participants Participant[]

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

//* The possible results of a duel for a participant.
enum MatchResult {
  WIN
  DRAW
  LOSS
}

//* The results of a participant in a match game.
model ParticipantMatchGameResult {
  id            Int          @id @default(autoincrement())
  // If `null`, the participant is to be determined.
  participantId Int?
  participant   Participant? @relation(fields: [participantId], references: [id])
  // Indicates where the participant comes from.
  position      Int?
  // If this participant forfeits, the other automatically wins.
  forfeit       Boolean?
  // The current score of the participant.
  score         Int?
  // Tells what is the result of a duel for this participant.
  result        MatchResult?

  opponent1MatchGameId Int?       @unique
  opponent1MatchGame   MatchGame? @relation("opponent1", fields: [opponent1MatchGameId], references: [id])

  opponent2MatchGameId Int?       @unique
  opponent2MatchGame   MatchGame? @relation("opponent2", fields: [opponent2MatchGameId], references: [id])
}

//* Participant Model
model Participant {
  id Int @id @default(autoincrement())

  tournamentId Int
  tournament   Tournament @relation(fields: [tournamentId], references: [managerTournamentId], onDelete: Cascade)

  // Name of participant
  name String

  // The Team associated with the participant entry
  teamId String? @db.Uuid
  team   Team?   @relation(fields: [teamId], references: [id])

  // Users associated with the participant entry
  users User[]

  // Match results of the participant in the torunament
  matchResults ParticipantMatchResult[]

  // Match Game results of the particpant in the torunament
  matchgameResults ParticipantMatchGameResult[]

  @@unique([tournamentId])
}

//* The results of a participant in a match.
model ParticipantMatchResult {
  id            Int          @id @default(autoincrement())
  // If `null`, the participant is to be determined.
  participantId Int?
  participant   Participant? @relation(fields: [participantId], references: [id])
  // Indicates where the participant comes from.
  position      Int?
  // If this participant forfeits, the other automatically wins.
  forfeit       Boolean?
  // The current score of the participant.
  score         Int?
  // Tells what is the result of a duel for this participant.
  result        MatchResult?

  opponent1MatchId Int?   @unique
  opponent1Match   Match? @relation("opponent1", fields: [opponent1MatchId], references: [id])

  opponent2MatchId Int?   @unique
  opponent2Match   Match? @relation("opponent2", fields: [opponent2MatchId], references: [id])
}

//* A stage, which can be a round-robin stage or a single/double elimination stage.
model Stage {
  id Int @id @default(autoincrement())

  //The parent tournament of the stage.
  tournamentId Int
  tournament   Tournament @relation(fields: [tournamentId], references: [managerTournamentId])

  //Name of the stage.
  name String

  //Type of the stage.
  type StageType

  //The number of the stage in its tournament. 
  number Int

  //Stage settings of a tournament.
  settings StageSettings?

  // The group of this stage
  groups     Group[]
  // The rounds of this stage
  rounds     Round[]
  // The matches of this stage
  matches    Match[]
  // The match games of this stage
  matchGames MatchGame[]

  @@unique([id, tournamentId])
}

//*enums for the type of stage
enum StageType {
  single_elimination
  double_elimination
  round_robin
}

//* A group in a stage.
model Group {
  id Int @id @default(autoincrement())

  //The number of group in a stage.
  number Int

  //ID of the parent stage.
  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])

  //The rounds of this group.
  rounds Round[]

  //The matches of this group.
  matches Match[]
}

//* A round in a group.
model Round {
  id Int @id @default(autoincrement())

  //Id of the parent stage.
  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])

  //ID of the parent group.
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])

  //The number of a round in its group.
  number Int

  //The matches of a round.
  match Match[]
}

//* The possible statuses of a match.
enum MatchStatus {
  // The two matches leading to this one are not completed yet.
  LOCKED
  // One participant is ready and waiting for the other one.
  WAITING
  // Both participants are ready to start.
  READY
  // The match is running.
  RUNNING
  // The match is completed.
  COMPLETED
  // At least one participant completed his following match.
  ARCHIVED
}

//* A match in a group.
model Match {
  id Int @id @default(autoincrement())

  // Status of the match.
  status MatchStatus

  // First opponent of the match.
  opponent1Result ParticipantMatchResult? @relation("opponent1")

  // Second opponent of the match.
  opponent2Result ParticipantMatchResult? @relation("opponent2")

  // ID of the parent stage.
  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])

  // ID of the parent group.
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])

  roundId Int
  round   Round @relation(fields: [roundId], references: [id])

  // The number of the match in its round
  number Int

  // The count of match games this match has. Can be `0` if it's a simple match, or a positive number for "Best Of" matches ie. '3'.
  childCount Int

  // The games of the match
  games MatchGame[]
}

//* A match game in a match.
model MatchGame {
  id     Int         @id @default(autoincrement())
  status MatchStatus

  // First opponent of the match.
  opponent1Result ParticipantMatchGameResult? @relation("opponent1")

  // Second opponent of the match.
  opponent2Result ParticipantMatchGameResult? @relation("opponent2")

  stageId Int
  stage   Stage @relation(fields: [stageId], references: [id])
  matchId Int
  match   Match @relation(fields: [matchId], references: [id])

  // The number of the match in its round
  number Int
}

//* The settings of a stage.
model StageSettings {
  id String @id @default(uuid())

  stageId Int   @unique
  stage   Stage @relation(fields: [stageId], references: [id])

  // The number of participants
  size Int?

  // A list of ordering methods to apply to the seeding.
  // 
  // - For a round-robin stage: 1 item required (**with** `"groups."` prefix).
  //   - Used to distribute in groups.
  // - For a simple elimination stage, 1 item required (**without** `"groups."` prefix).
  //   - Used to distribute in round 1.
  // - For a double elimination stage, 1 item required, 3+ items supported (**without** `"groups."` prefix).
  //   - Item 1 (required) - Used to distribute in WB round 1.
  //   - Item 2 - Used to distribute WB losers in LB round 1.
  //   - Items 3+ - Used to distribute WB losers in LB minor rounds (1 per round).
  seedOrdering SeedOrdering[]

  // Whether to balance BYEs in the seeding of an elimination stage.
  // This prevents having BYE against BYE in matches.
  balanceByes Boolean?

  // All matches of the stage will have this child count.
  // This can later be overridden for certain groups, rounds or matches.
  matchesChildCount Int?

  // Number of groups in a round-robin stage.
  groupCount Int?

  // The mode for the round-robin stage.
  //
  // - If `simple`, each participant plays each opponent once.
  // - If `double`, each participant plays each opponent twice, once at home and once away.
  roundRobinMode RoundRobinMode?

  // A list of seeds per group for a round-robin stage to be manually ordered.
  //
  // Seed ordering is ignored if this property is given.
  // **Hint**: Should be Int[][]
  manualOrdering Json?

  // Optional final between semi-final losers.
  consolationFinal Boolean?

  // Whether to skip the first round of the WB of a double elimination stage.
  skipFirstRound Boolean?

  // Optional grand final between WB and LB winners.
  //
  // - If `none`, there is no grand final.
  // - If `simple`, the final is a single match. The winner is the winner of the stage.
  // - If `double`, if the WB winner wins, he's the winner of the stage. But if he loses, the final is reset and there is a very last match.
  // It might be fairer since it gives the WB winner the right to lose once during the stage...
  grandFinal GrandFinalType?
}
