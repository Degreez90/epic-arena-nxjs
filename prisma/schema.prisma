// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

//User Types
type Record {
  wins   Int @default(0)
  losses Int @default(0)
}

//Must be Int type because of prisma
type Earnings {
  total          Int       @default(0)
  lastPayout     Int       @default(0)
  lastPayoutDate DateTime?
}

//Must be Int type because of prisma
type Balance {
  promotionalBalance  Int @default(0)
  pendingBalance      Int @default(0)
  withdrawableBalance Int @default(0)
  depositLimit        Int @default(50000)
}

model User {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  fName                 String?
  lName                 String?
  userName              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  vPassword             String?
  phoneNumber           String?
  tournaments           String[]
  image                 String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  record                Record?
  earnings              Earnings?
  balance               Balance
  teams                 Team[]
  participants          Participant[]
  createdAt             DateTime               @default(now())
  Tournament            Tournament[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//* Team Model
model Team {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  teamName     String
  roster       String[]
  activeRoster String[]
  record       Record

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamName, userId])
}

//TODO:: Game types

//* Game Model
model Game {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  gameTitle String
  category  String?
  rules     Json?
}

//* Tournament Model
model Tournament {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  uid          Int           @unique
  name         String
  destription  String
  participants Participant[]
  Stage        Stage[]
  status       Status
  createdby    User          @relation(fields: [userId], references: [id])
  userId       String        @db.ObjectId
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Participant Model
model Participant {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  tournament_id Int
  userId        String @db.ObjectId

  user       User       @relation(fields: [userId], references: [id])
  tournament Tournament @relation(fields: [tournament_id], references: [uid])

  @@unique([userId, tournament_id]) //Only 1 participant per tournament
}

//Stage Model
model Stage {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  uid           Int     @unique
  tournament_id String  @db.ObjectId
  name          String
  type          Type
  number        Int
  settings      Setting

  tournament Tournament @relation(fields: [tournament_id], references: [id])

  Group Group[]
  Round Round[]

  @@unique([id, tournament_id])
}

enum Type {
  single_elimination
  double_elimination
  round_robin
}

type Setting {
  consolationFinal  Boolean
  seedOrdering      String[]
  matchesChildCount Int
  size              Int
  grandFinal        String
  balanceByes       Boolean
}

model Group {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  uid      Int
  number   Int
  stage_id Int

  stage Stage @relation(fields: [stage_id], references: [uid])
}

model Round {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  uid      Int
  number   Int
  group_id Int
  stage_id Int

  stage Stage @relation(fields: [stage_id], references: [uid])
}

model Match {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  uid         Int
  number      Int
  group_id    Int
  stage_id    Int
  round_id    Int
  child_count Int?
  status      Int?
  opponent1   Opponent1? @relation(fields: [opponent1Id], references: [id])
  opponent1Id String     @db.ObjectId
  Opponent2   Opponent2? @relation(fields: [opponent2Id], references: [id])
  opponent2Id String?    @db.ObjectId
}

model Opponent1 {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  position Int?
  score    Int?
  result   Result?
  Match    Match[] //Opp1 can have multiple matches
}

model Opponent2 {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  position Int?
  score    Int?
  result   Result?
  Match    Match[] //Opp1 can have multple matches
}

enum Result {
  win
  loss
}

enum Status {
  pending
  progress
  completed
  archived
}
