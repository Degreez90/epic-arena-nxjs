// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

enum UserRole {
  ADMIN
  USER
}

//User Types
model Record {
  id     String @id @default(cuid())
  wins   Int    @default(0)
  losses Int    @default(0)
  User   User[]
  Team   Team[]
}

//Must be Int type because of prisma
model Earnings {
  id             String    @id @default(cuid())
  total          Int       @default(0)
  lastPayout     Int       @default(0)
  lastPayoutDate DateTime?
  User           User[]
}

//Must be Int type because of prisma
model Balance {
  id                  String @id @default(cuid())
  promotionalBalance  Int    @default(0)
  pendingBalance      Int    @default(0)
  withdrawableBalance Int    @default(0)
  depositLimit        Int    @default(50000)
  User                User[]
}

model User {
  id                    String                 @id @default(cuid())
  fName                 String?
  lName                 String?
  userName              String?                @unique
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  vPassword             String?
  phoneNumber           String?
  tournaments           String[]
  image                 String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  record                Record?                @relation(fields: [recordId], references: [id])
  earningsId            String?
  earnings              Earnings?              @relation(fields: [earningsId], references: [id])
  balanceId             String?
  balance               Balance?               @relation(fields: [balanceId], references: [id])
  teams                 Team[]
  participants          Participant[]
  createdAt             DateTime               @default(now())
  recordId              String?
}

model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

//* Team Model
model Team {
  id           String   @id @default(cuid())
  userId       String
  teamName     String
  roster       String[]
  activeRoster String[]
  record       Record   @relation(fields: [recordId], references: [id])

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  recordId String

  @@unique([teamName, userId])
}

//TODO:: Game types

//* Game Model
model Game {
  id        String  @id @default(cuid())
  gameTitle String
  category  String?
  rules     Json?
}

//* Tournament Model
model Tournament {
  id           String        @id @default(cuid())
  name         String
  destription  String
  participants Participant[]
  Stage        Stage[]
}

// Participant Model
model Participant {
  id            String     @id @default(cuid())
  tournament_id Int
  userId        String
  tournamentId  String
  user          User       @relation(fields: [userId], references: [id])
  tournament    Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([userId, tournament_id]) //Only 1 participant per tournament
}

//Stage Model
model Stage {
  id           String     @id @default(cuid())
  name         String
  type         Type
  number       Int
  settingId    String
  settings     Setting    @relation(fields: [settingId], references: [id])
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  Group        Group[]
  Round        Round[]

  @@unique([id, tournamentId])
}

enum Type {
  single_elimination
  double_elimination
  round_robin
}

model Setting {
  id                String   @id @default(cuid())
  consolationFinal  Boolean
  seedOrdering      String[]
  matchesChildCount Int
  size              Int
  grandFinal        String
  balanceByes       Boolean
  Stage             Stage[]
}

model Group {
  id      String @id @default(cuid())
  number  Int
  stageId String
  stage   Stage  @relation(fields: [stageId], references: [id])
}

model Round {
  id      String @id @default(cuid())
  number  Int
  groupId Int
  stageId String
  stage   Stage  @relation(fields: [stageId], references: [id])
}
